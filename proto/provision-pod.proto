syntax = "proto3";
package apocryph.proto.v0.provisionPod;

option go_package = "github.com/comrade-coop/trusted-pods/pkg/proto";
import "pod.proto";
service ProvisionPodService {
  rpc ProvisionPod(ProvisionPodRequest) returns (ProvisionPodResponse);
  rpc UpdatePod(UpdatePodRequest) returns (ProvisionPodResponse);
  rpc DeletePod(DeletePodRequest) returns (DeletePodResponse);
  rpc GetPodLogs(PodLogRequest) returns (stream PodLogResponse);
}

message ProvisionPodRequest {
  bytes podManifestCid = 1;
  repeated Key keys = 3;
  PaymentChannel payment = 4;
}

message DeletePodRequest {
  Credentials credentials = 1;
}

message DeletePodResponse {
 bool success = 1;
 string error = 2;
}

message UpdatePodRequest {
  pod.Pod pod = 1;
  repeated Key keys = 2;
  Credentials credentials = 3;
}
message UpdatePodResponse {
  bool success = 1;
  string error = 2;
}

message PaymentChannel {
  bytes chainID = 1;
  bytes contractAddress = 2;
  bytes publisherAddress = 3;
  bytes providerAddress = 4;
  bytes podID = 5;
  bytes tokenAddress = 6;
}

message Key {
  bytes data = 1;
}

message ProvisionPodResponse {
  string error = 1;
  repeated ExposedHostPort addresses = 2;
  string namespace = 3;
  message ExposedHostPort {
    string multiaddr = 1;
    string containerName = 2;
    uint64 containerPort = 3;
  }
}

message PodLogRequest{
  string containerName = 1;
  Credentials credentials = 2;
}

message PodLogResponse{
 LogEntry logEntry = 1;
}

message LogEntry{
  uint64 NanosecondsUnixEpoch = 1;
  string log = 2;
  string stream = 3; // std(in/out/err)
  string time = 4;
}

message Credentials{
  bytes signature = 1;
  bytes publisherAddress = 2;
}
