# -*- mode: Python -*-
# SPDX-License-Identifier: GPL-3.0

load("../../../deploy/Tiltfile", "apocryph_resource", "cluster_ip")

apocryph_resource(
    "nginx-example",
    "../common/manifests/manifest-nginx.yaml",
    upload_images=False,
    apply_flags=["--mint-funds"],
    labels=["apocryph-pod", "flaky"],
)


withdraw_address = "0x70997970C51812dc3A010C7d01b50e0d17dc79C8"  # TODO copied from :/deploy/trustedpods/values.yaml
token_contract = "0x5FbDB2315678afecb367f032d93F642f64180aa3"  # TODO copied from :/contracts/broadcast/Deploy.s.sol/31337/run-latest.json
manifest_host = (
    "example.localhost"  # TODO copied from :/test/e2e/common/manifests/manifest-nginx.yaml
)

ethereum_namespace = "eth"
# TODO copied from :/deploy/Tiltfile
ethereum_rpc = (
    "http://%s:$(kubectl get svc -n %s eth-rpc -o jsonpath --template '{$.spec.ports[0].nodePort}')"
    % (cluster_ip, ethereum_namespace)
)

provider_balance_cmd = 'cast call "%s" "balanceOf(address)" "%s" -r %s | cast to-fixed-point 18' % (
    token_contract,
    withdraw_address,
    ethereum_rpc,
)
curl_cmd = 'curl --connect-timeout 40 -H "Host: %s" localhost:8004 --fail-with-body' % manifest_host

local_resource(
    "ingress-nginx-portforward",
    serve_cmd="kubectl port-forward -n keda svc/ingress-nginx-controller 8004:80",
)
# k8s_resource(workload="ingress-nginx", port_forwards=["8004:80"])

local_resource(
    "nginx-example-measure-and-query",
    [
        "bash",
        "-c",
        " ".join(
            [
                "set -xeuo pipefail;",
                'echo -n "Provider balance before:"; %s;' % provider_balance_cmd,
                "while ! %s; do sleep 10; done;" % curl_cmd,
                "%s;" % curl_cmd,
                "sleep 100;",
                'echo -n "Provider balance after:"; %s;' % provider_balance_cmd,
            ]
        ),
    ],
    labels=["apocryph-pod"],
    trigger_mode=TRIGGER_MODE_MANUAL,
    auto_init=False,
)
